{"version":3,"sources":["components/NavItem.jsx","components/NavBar.jsx","components/Pages/Home.jsx","components/Pages/Projects.jsx","components/Pages/Resume.jsx","components/Pages/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["NavItem","navItemContainer","width","textAlign","navItemStyleActive","color","textDecoration","fontWeight","navItemStyle","block","height","backgroundColor","margin","borderRadius","style","this","onClick","props","clicked","index","to","active","text","Component","NavBar","navBarContainer","display","marginTop","marginBottom","state","links","selectedIndex","bind","e","setState","map","link","i","Home","Projects","Resume","Contact","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAGqBA,E,2MAehBC,iBAAmB,WAChB,MAAO,CACHC,MAAO,QACPC,UAAW,W,EAInBC,mBAAqB,WACjB,MAAO,CACHC,MAAO,OACPC,eAAgB,OAChBC,WAAY,W,EAIpBC,aAAe,WACX,MAAO,CACHH,MAAO,OACPC,eAAgB,OAChBC,WAAY,W,EAIpBE,MAAQ,WACJ,MAAO,CACHP,MAAO,MACPQ,OAAQ,MACRC,gBAAiB,QACjBC,OAAQ,OACRC,aAAc,Q,wEA1CZ,IAAD,OAEL,OACI,yBAAKC,MAAOC,KAAKd,oBACb,yBAAKe,QAAS,kBAAM,EAAKC,MAAMC,QAAQ,EAAKD,MAAME,SAC9C,kBAAC,IAAD,CAASC,GAAIL,KAAKE,MAAMG,GAAIN,MAAOC,KAAKE,MAAMI,OAASN,KAAKX,qBAAuBW,KAAKP,gBAAiBO,KAAKE,MAAMK,MACpH,yBAAKR,MAAOC,KAAKE,MAAMI,OAASN,KAAKN,QAAU,a,GAR9Bc,aCAhBC,E,YAEjB,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KA6BVQ,gBAAkB,WACd,MAAO,CACHC,QAAS,OACTC,UAAW,MACXC,aAAc,QAhClB,EAAKC,MAAQ,CACTC,MAAO,CACH,CAACR,KAAM,OAAQF,GAAI,KACnB,CAACE,KAAM,WAAYF,GAAI,aACvB,CAACE,KAAM,SAAUF,GAAI,WACrB,CAACE,KAAM,UAAWF,GAAI,aAE1BW,cAAe,GAEnB,EAAKb,QAAU,EAAKA,QAAQc,KAAb,gBAXA,E,qEAeXC,GACJlB,KAAKmB,SAAS,CAACH,cAAeE,M,+BAGxB,IAAD,OACL,OACI,yBAAKnB,MAAOC,KAAKU,mBACZV,KAAKc,MAAMC,MAAMK,KAAI,SAACC,EAAMC,GAAP,OAClB,kBAAC,EAAD,CAASlB,MAAOkB,EAAGnB,QAAS,EAAKA,QAASG,OAAQ,EAAKQ,MAAME,gBAAkBM,EAAGf,KAAMc,EAAKd,KAAMF,GAAIgB,EAAKhB,a,GAzB5FG,aCDfe,E,iLAEb,OACI,yC,GAHsBf,aCAbgB,E,iLAEb,OACI,6C,GAH0BhB,aCAjBiB,E,iLAEb,OACI,2C,GAHwBjB,aCAfkB,E,iLAEb,OACI,4C,GAHyBlB,aCqBtBmB,MAdf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,YAAYC,UAAWP,IACzC,kBAAC,IAAD,CAAOM,KAAK,UAAUC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,OCLtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b9c109de.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default class NavItem extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={this.navItemContainer()}>\r\n                <div onClick={() => this.props.clicked(this.props.index)}>\r\n                    <NavLink to={this.props.to} style={this.props.active ? this.navItemStyleActive() : this.navItemStyle()}>{this.props.text}</NavLink>\r\n                    <div style={this.props.active ? this.block() : null}></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n     //STYLES\r\n     navItemContainer = () => {\r\n        return {\r\n            width: '100vh',\r\n            textAlign: 'center',\r\n        }\r\n    };\r\n    \r\n    navItemStyleActive = () => {\r\n        return {\r\n            color: '#000',\r\n            textDecoration: 'none',\r\n            fontWeight: 'normal',\r\n        }\r\n    }\r\n\r\n    navItemStyle = () => {\r\n        return {\r\n            color: '#000',\r\n            textDecoration: 'none',\r\n            fontWeight: 'normal',\r\n        }\r\n    }\r\n\r\n    block = () => {\r\n        return {\r\n            width: '18%',\r\n            height: '5px',\r\n            backgroundColor: 'black',\r\n            margin: 'auto', \r\n            borderRadius: '1vh'\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NavItem from './NavItem'\r\n\r\nexport default class NavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            links: [\r\n                {text: \"Home\", to: \"/\"},\r\n                {text: \"Projects\", to: \"/projects\"},\r\n                {text: \"Resume\", to: \"/resume\"},\r\n                {text: \"Contact\", to: \"/contact\"}\r\n            ],\r\n            selectedIndex: 0,\r\n        };\r\n        this.clicked = this.clicked.bind(this);\r\n      }\r\n\r\n    //FUNCTIONS\r\n    clicked(e) {\r\n        this.setState({selectedIndex: e})\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div style={this.navBarContainer()}>\r\n                {this.state.links.map((link, i) => (\r\n                    <NavItem index={i} clicked={this.clicked} active={this.state.selectedIndex === i} text={link.text} to={link.to}/>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //STYLES\r\n    navBarContainer = () => {\r\n        return {\r\n            display: 'flex',\r\n            marginTop: '1vh',\r\n            marginBottom: '1vh',\r\n        }\r\n    };\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Home\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Projects\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Resume extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Resume\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Contact\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport NavBar from \"./components/NavBar\";\nimport Home from \"./components/Pages/Home\";\nimport Projects from './components/Pages/Projects';\nimport Resume from './components/Pages/Resume';\nimport Contact from './components/Pages/Contact';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <NavBar />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/projects\" component={Projects} />\n        <Route path=\"/resume\" component={Resume} />\n        <Route path=\"/contact\" component={Contact} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}